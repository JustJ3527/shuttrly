"""
Django settings for shuttrly project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Import critical and confidential data
import environ

env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-7sy3bqyy-j)gd^md$#+fb$2@vexq7d&!u3&rq!zjli0^dzx2#k"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "21632b3c9aba.ngrok-free.app",
    "10.101.4.216",
    "192.168.1.65",
    "192.168.1.73"
]

AUTH_USER_MODEL = "users.CustomUser"

LOGIN_REDIRECT_URL = "/login/"
LOGOUT_REDIRECT_URL = "/login/"
LOGIN_URL = "/login/"


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "users.apps.UsersConfig",
    "adminpanel",
    "logs",
    "posts",
    "photos.apps.PhotosConfig",
    # API
    "rest_framework", # REST framework for building APIs
    "rest_framework_simplejwt", # JSON Web Token Authentication
    "corsheaders", # Cross-Origin Resource Sharing
    ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "users.middleware.OnlineStatusMiddleware",  # Custom middleware for online status
    "users.middleware.LoginCachePreventionMiddleware",  # Prevent caching on login pages
    # API
    "corsheaders.middleware.CorsMiddleware", # Cross-Origin Resource Sharing
    "django.middleware.common.CommonMiddleware", # Common middleware for handling common requests
]

AUTHENTICATION_BACKENDS = [
    "users.backend.SuperuserUsernameBackend",  # ← ton backend
    "django.contrib.auth.backends.ModelBackend",
]

ROOT_URLCONF = "shuttrly.urls"



TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "shuttrly.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "users.validators.CustomPasswordValidator",
        "OPTIONS": {
            "min_length": 12,
            "require_uppercase": True,
            "require_lowercase": True,
            "require_digits": True,
            "require_symbol": True,
        },
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"
EMAIL_BACKEND = env(
    "EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default=EMAIL_HOST_USER)

# veriables
# settings.py
PROFILE_PICTURE_DELETION_DELAY_SECONDS = 10

# Photo upload settings
MAX_PHOTO_SIZE = 100 * 1024 * 1024  # 100MB
PHOTO_UPLOAD_PATH = "photos/"
ALLOWED_PHOTO_EXTENSIONS = [
    "jpg",
    "jpeg",
    "png",
    "tiff",
    "tif",
    "raw",
    "cr2",
    "nef",
    "arw",
    "dng",
    "cr3",
]

# File upload timeout and session settings for large uploads
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB in memory
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB in memory
FILE_UPLOAD_TEMP_DIR = os.path.join(BASE_DIR, "temp_uploads")
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000  # Allow more form fields

# Session settings for progress tracking
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_AGE = 7200  # 2 hours
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Timeout settings for long-running operations
REQUEST_TIMEOUT = 300  # 5 minutes
UPLOAD_TIMEOUT = 600  # 10 minutes

# Create temp upload directory if it doesn't exist
os.makedirs(FILE_UPLOAD_TEMP_DIR, exist_ok=True)


# Configuration REST framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# Conifiguration JWT
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365),  # 1 year - effectively no expiration
    'REFRESH_TOKEN_LIFETIME': timedelta(days=365),  # 1 year - effectively no expiration
    'ROTATE_REFRESH_TOKENS': False,  # Disable rotation to prevent automatic expiration
    'BLACKLIST_AFTER_ROTATION': False,  # Disable blacklisting
}

# CORS for allowing iOS requests
CORS_ALLOW_ALL_ORIGINS = True # Developpement only

# ===============================
# OPTIMISATIONS POUR LE DÉVELOPPEMENT
# ===============================

if DEBUG:
    # Optimisations pour accélérer le rechargement
    import logging
    
    # Désactiver les logs verbeux
    logging.getLogger('django.db.backends').setLevel(logging.WARNING)
    logging.getLogger('django.utils.autoreload').setLevel(logging.WARNING)
    
    # Optimiser le rechargement automatique
    import os
    os.environ['DJANGO_AUTORELOAD_ENABLED'] = '1'
    
    # Réduire la fréquence de vérification des fichiers
    import django
    django.setup()
    
    # Optimiser la compilation des templates
    TEMPLATES[0]['OPTIONS']['debug'] = False
    
    # Désactiver la validation des modèles en développement
    import django.core.checks
    django.core.checks.register = lambda *args, **kwargs: []
    
    # Optimiser la base de données SQLite
    DATABASES['default']['OPTIONS'] = {
        'timeout': 20,
        'check_same_thread': False,
    }
    
    # Réduire la taille des sessions
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'
    SESSION_COOKIE_AGE = 3600  # 1 heure au lieu de 2
    SESSION_SAVE_EVERY_REQUEST = False  # Désactiver la sauvegarde systématique
    
    # Optimiser les middlewares en développement
    MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "corsheaders.middleware.CorsMiddleware",  # Déplacer CORS en haut
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "users.middleware.OnlineStatusMiddleware",
        "users.middleware.LoginCachePreventionMiddleware",
    ]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
    },
    # "loggers": {
    #     "django.db.backends": {
    #         "handlers": ["console"],
    #         "level": "DEBUG",   # Affiche toutes les requêtes SQL
    #     },
    # },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
}